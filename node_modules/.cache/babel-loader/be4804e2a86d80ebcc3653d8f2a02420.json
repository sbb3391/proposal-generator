{"ast":null,"code":"var _jsxFileName = \"/home/sbb3391/code/projects/react-proposal-generator/src/components/CompleteButton.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CompleteButton = ({\n  machineAssemblies,\n  machine\n}) => {\n  _s();\n\n  const history = useHistory();\n\n  const createMachine = () => {\n    const data = {\n      model: {\n        id: machineAssemblies[0].model_id,\n        assemblies: [machineAssemblies]\n      }\n    };\n    fetch('http://localhost:3000/machines', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    }).then(resp => resp.json()).then(json => {\n      machine(json);\n      history.push(`/machines/${json.id}`);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"text-4xl\",\n      children: \"\\u2192\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"complete-button\",\n      className: \"static-button\",\n      onClick: createMachine,\n      children: \"Complete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(CompleteButton, \"9cZfZ04734qoCGIctmKX7+sX6eU=\", false, function () {\n  return [useHistory];\n});\n\n_c = CompleteButton;\n\nconst mapStateToProps = state => ({\n  machineAssemblies: state.machine.assemblies\n});\n\nconst mapDispatchToProps = dispatch => ({\n  machine: machine => dispatch({\n    type: 'ADD_MACHINE',\n    machine: machine\n  })\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CompleteButton);\n\nvar _c;\n\n$RefreshReg$(_c, \"CompleteButton\");","map":{"version":3,"sources":["/home/sbb3391/code/projects/react-proposal-generator/src/components/CompleteButton.js"],"names":["React","Component","useState","useHistory","connect","CompleteButton","machineAssemblies","machine","history","createMachine","data","model","id","model_id","assemblies","fetch","method","headers","body","JSON","stringify","then","resp","json","push","mapStateToProps","state","mapDispatchToProps","dispatch","type"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,OAAT,QAAwB,aAAxB;;;;AAEA,MAAMC,cAAc,GAAG,CAAC;AAACC,EAAAA,iBAAD;AAAoBC,EAAAA;AAApB,CAAD,KAAkC;AAAA;;AACvD,QAAMC,OAAO,GAAGL,UAAU,EAA1B;;AAEA,QAAMM,aAAa,GAAG,MAAM;AAC1B,UAAMC,IAAI,GAAG;AACXC,MAAAA,KAAK,EAAE;AACLC,QAAAA,EAAE,EAAEN,iBAAiB,CAAC,CAAD,CAAjB,CAAqBO,QADpB;AAELC,QAAAA,UAAU,EAAE,CAACR,iBAAD;AAFP;AADI,KAAb;AAOAS,IAAAA,KAAK,CAAC,gCAAD,EAAmC;AACxCC,MAAAA,MAAM,EAAE,MADgC;AAEtCC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAF6B;AAKtCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeV,IAAf;AALgC,KAAnC,CAAL,CAOCW,IAPD,CAOMC,IAAI,IAAIA,IAAI,CAACC,IAAL,EAPd,EAQCF,IARD,CAQME,IAAI,IAAI;AACZhB,MAAAA,OAAO,CAACgB,IAAD,CAAP;AACAf,MAAAA,OAAO,CAACgB,IAAR,CAAc,aAAYD,IAAI,CAACX,EAAG,EAAlC;AACD,KAXD;AAYD,GApBD;;AAqBA,sBACE;AAAA,4BACE;AAAM,MAAA,SAAS,EAAC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,EAAE,EAAC,iBAAX;AAA6B,MAAA,SAAS,EAAC,eAAvC;AAAuD,MAAA,OAAO,EAAEH,aAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAMD,CA9BD;;GAAMJ,c;UACYF,U;;;KADZE,c;;AAiCN,MAAMoB,eAAe,GAAGC,KAAK,KAC3B;AACEpB,EAAAA,iBAAiB,EAAEoB,KAAK,CAACnB,OAAN,CAAcO;AADnC,CAD2B,CAA7B;;AAMA,MAAMa,kBAAkB,GAAGC,QAAQ,KACjC;AACErB,EAAAA,OAAO,EAAEA,OAAO,IAAIqB,QAAQ,CAAC;AAACC,IAAAA,IAAI,EAAE,aAAP;AAAsBtB,IAAAA,OAAO,EAAEA;AAA/B,GAAD;AAD9B,CADiC,CAAnC;;AAMA,eAAeH,OAAO,CAACqB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CtB,cAA7C,CAAf","sourcesContent":["import React, { Component, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom'\r\nimport { connect } from 'react-redux';\r\n\r\nconst CompleteButton = ({machineAssemblies, machine}) => {\r\n  const history = useHistory()\r\n\r\n  const createMachine = () => {\r\n    const data = {\r\n      model: {\r\n        id: machineAssemblies[0].model_id,\r\n        assemblies: [machineAssemblies]\r\n      }\r\n    }\r\n\r\n    fetch('http://localhost:3000/machines', {\r\n    method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data)\r\n    })\r\n    .then(resp => resp.json())\r\n    .then(json => {\r\n      machine(json)\r\n      history.push(`/machines/${json.id}`)\r\n    })\r\n  }\r\n  return (\r\n    <>\r\n      <span className=\"text-4xl\">&#x2192;</span>\r\n      <button id=\"complete-button\" className=\"static-button\" onClick={createMachine}>Complete</button>\r\n    </>\r\n  );\r\n}\r\n\r\n\r\nconst mapStateToProps = state => (\r\n  {\r\n    machineAssemblies: state.machine.assemblies\r\n  }\r\n)\r\n\r\nconst mapDispatchToProps = dispatch => (\r\n  {\r\n    machine: machine => dispatch({type: 'ADD_MACHINE', machine: machine}),\r\n  }\r\n)\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CompleteButton);\r\n"]},"metadata":{},"sourceType":"module"}