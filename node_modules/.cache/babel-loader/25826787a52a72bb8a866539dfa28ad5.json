{"ast":null,"code":"// import { combineReducers } from 'redux';\nconst defaultState = {\n  clickedAssemblyId: null,\n  machine: {\n    completedMachine: false,\n    assemblies: []\n  },\n  model: {\n    allAssemblies: [],\n    remainingAssemblies: [],\n    remainingPickOneGroupIds: []\n  }\n};\n\nfunction newMachineReducer(state = defaultState, action) {\n  switch (action.type) {\n    case 'RESET_MACHINE':\n      return defaultState;\n\n    case 'ADD_MODEL':\n      return Object.assign({}, { ...state\n      }, {\n        modelId: action.modelId\n      });\n\n    case 'ADD_ALL_ASSEMBLIES':\n      // This only gets called once to add all machine assemblies from fetch to the store\n      const requiredAssemblies = action.assemblies.filter(assembly => assembly.required_assembly);\n      const unrequiredAssemblies = action.assemblies.filter(assembly => !assembly.required_assembly); // getting all pickOneGroups and adding it to store\n\n      const allPickOneGroups = action.assemblies.filter(assembly => assembly.pick_one_group);\n      const pickOneGroupIds = allPickOneGroups.map(assembly => assembly.pick_one_group.pick_one_group_id);\n      const uniquePickOneGroupIds = [...new Set(pickOneGroupIds)];\n      return { ...state,\n        machine: {\n          assemblies: requiredAssemblies\n        },\n        model: { ...state.model,\n          allAssemblies: action.assemblies,\n          remainingAssemblies: unrequiredAssemblies,\n          remainingPickOneGroupIds: uniquePickOneGroupIds\n        }\n      };\n\n    case 'ADD_ASSEMBLY':\n      // this takes one assembly and adds it to the machine assembly (the one we're building)\n      // and removes it from the list of remaining assemblies that are available for selection\n      const indexOfAddedAssembly = state.model.remainingAssemblies.indexOf(action.assembly);\n      let newState = { ...state,\n        clickedAssemblyId: action.assembly.id,\n        machine: { ...state.machine,\n          assemblies: [...state.machine.assemblies, action.assembly]\n        },\n        model: { ...state.model,\n          remainingAssemblies: [...state.model.remainingAssemblies.slice(0, indexOfAddedAssembly), ...state.model.remainingAssemblies.slice(indexOfAddedAssembly + 1)]\n        }\n      }; // determines if the selected assembly belongs to a 'pick one group.' if it does, all other items in the group will also be\n      // removed as selection options.\n\n      const group = action.assembly.pick_one_group;\n\n      if (group) {\n        const indexOfGroupId = state.model.remainingPickOneGroupIds.indexOf(group.pick_one_group_id);\n        const remainingAssembliesInPickOneGroups = state.model.remainingAssemblies.filter(assembly => assembly.pick_one_group);\n        const assembliesInGroup = remainingAssembliesInPickOneGroups.filter(assembly => assembly.pick_one_group.pick_one_group_id === group.pick_one_group_id);\n        const newRemainingAssemblies = state.model.remainingAssemblies.filter(assembly => !assembliesInGroup.includes(assembly));\n        newState = { ...newState,\n          model: { ...newState.model,\n            remainingPickOneGroupIds: [...state.model.remainingPickOneGroupIds.slice(0, indexOfGroupId), ...state.model.remainingPickOneGroupIds.slice(indexOfGroupId + 1)],\n            remainingAssemblies: newRemainingAssemblies\n          }\n        };\n      }\n\n      return newState;\n\n    case 'REMOVE_CLICKED_ID':\n      return { ...state,\n        clickedAssemblyId: null\n      };\n\n    case 'ADD_MACHINE':\n      return { ...state,\n        machine: {\n          assemblies: action.machine.assemblies\n        }\n      };\n\n    case 'CHANGE_ITEM_PRICE':\n      const assembly = state.machine.assemblies.find(assembly => assembly.id == action.item.assemblyId && assembly.modelId == action.item.modelId);\n      const assemblyIndex = state.machine.assemblies.indexOf(assembly);\n      const item = assembly.items.find(i => i.itemId == action.item.itemId);\n      const itemIndex = assembly.items.indexOf(item);\n    // debugger;\n    // return {\n    //   ...state,\n    //   machine: {\n    //     ...state.machine,\n    //     assemblies: []\n    //   }\n    // }\n\n    default:\n      return { ...state\n      };\n  }\n}\n\nexport default newMachineReducer;","map":{"version":3,"sources":["/home/sbb3391/code/projects/react-proposal-generator/src/reducers/newMachineReducer.js"],"names":["defaultState","clickedAssemblyId","machine","completedMachine","assemblies","model","allAssemblies","remainingAssemblies","remainingPickOneGroupIds","newMachineReducer","state","action","type","Object","assign","modelId","requiredAssemblies","filter","assembly","required_assembly","unrequiredAssemblies","allPickOneGroups","pick_one_group","pickOneGroupIds","map","pick_one_group_id","uniquePickOneGroupIds","Set","indexOfAddedAssembly","indexOf","newState","id","slice","group","indexOfGroupId","remainingAssembliesInPickOneGroups","assembliesInGroup","newRemainingAssemblies","includes","find","item","assemblyId","assemblyIndex","items","i","itemId","itemIndex"],"mappings":"AAAA;AAEA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,iBAAiB,EAAE,IADA;AAEnBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,gBAAgB,EAAE,KADX;AAEPC,IAAAA,UAAU,EAAE;AAFL,GAFU;AAMnBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,aAAa,EAAE,EADV;AAELC,IAAAA,mBAAmB,EAAE,EAFhB;AAGLC,IAAAA,wBAAwB,EAAE;AAHrB;AANY,CAArB;;AAaA,SAASC,iBAAT,CAA2BC,KAAK,GAAGV,YAAnC,EAAiDW,MAAjD,EAAyD;AACvD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,eAAL;AACE,aAAOZ,YAAP;;AACF,SAAK,WAAL;AACE,aAAOa,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,EAAC,GAAGJ;AAAJ,OAAlB,EAA8B;AAACK,QAAAA,OAAO,EAAEJ,MAAM,CAACI;AAAjB,OAA9B,CAAP;;AACF,SAAK,oBAAL;AACE;AACA,YAAMC,kBAAkB,GAAGL,MAAM,CAACP,UAAP,CAAkBa,MAAlB,CAA0BC,QAAQ,IAAIA,QAAQ,CAACC,iBAA/C,CAA3B;AACA,YAAMC,oBAAoB,GAAGT,MAAM,CAACP,UAAP,CAAkBa,MAAlB,CAA0BC,QAAQ,IAAI,CAACA,QAAQ,CAACC,iBAAhD,CAA7B,CAHF,CAKE;;AACA,YAAME,gBAAgB,GAAGV,MAAM,CAACP,UAAP,CAAkBa,MAAlB,CAA0BC,QAAQ,IAAIA,QAAQ,CAACI,cAA/C,CAAzB;AACA,YAAMC,eAAe,GAAGF,gBAAgB,CAACG,GAAjB,CAAsBN,QAAQ,IAAIA,QAAQ,CAACI,cAAT,CAAwBG,iBAA1D,CAAxB;AACA,YAAMC,qBAAqB,GAAG,CAAC,GAAG,IAAIC,GAAJ,CAAQJ,eAAR,CAAJ,CAA9B;AAEA,aAAO,EACL,GAAGb,KADE;AAEHR,QAAAA,OAAO,EAAE;AACPE,UAAAA,UAAU,EAAEY;AADL,SAFN;AAKHX,QAAAA,KAAK,EAAE,EACL,GAAGK,KAAK,CAACL,KADJ;AAEHC,UAAAA,aAAa,EAAEK,MAAM,CAACP,UAFnB;AAGHG,UAAAA,mBAAmB,EAAEa,oBAHlB;AAIHZ,UAAAA,wBAAwB,EAAEkB;AAJvB;AALJ,OAAP;;AAYF,SAAK,cAAL;AACE;AACA;AAEA,YAAME,oBAAoB,GAAGlB,KAAK,CAACL,KAAN,CAAYE,mBAAZ,CAAgCsB,OAAhC,CAAwClB,MAAM,CAACO,QAA/C,CAA7B;AAEA,UAAIY,QAAQ,GAAG,EACb,GAAGpB,KADU;AAEbT,QAAAA,iBAAiB,EAAEU,MAAM,CAACO,QAAP,CAAgBa,EAFtB;AAGb7B,QAAAA,OAAO,EAAE,EACP,GAAGQ,KAAK,CAACR,OADF;AAEPE,UAAAA,UAAU,EAAE,CAAC,GAAGM,KAAK,CAACR,OAAN,CAAcE,UAAlB,EAA8BO,MAAM,CAACO,QAArC;AAFL,SAHI;AAObb,QAAAA,KAAK,EAAE,EACL,GAAGK,KAAK,CAACL,KADJ;AAELE,UAAAA,mBAAmB,EAAE,CAAC,GAAGG,KAAK,CAACL,KAAN,CAAYE,mBAAZ,CAAgCyB,KAAhC,CAAsC,CAAtC,EAAyCJ,oBAAzC,CAAJ,EAAoE,GAAGlB,KAAK,CAACL,KAAN,CAAYE,mBAAZ,CAAgCyB,KAAhC,CAAsCJ,oBAAoB,GAAG,CAA7D,CAAvE;AAFhB;AAPM,OAAf,CANF,CAmBE;AACA;;AACA,YAAMK,KAAK,GAAGtB,MAAM,CAACO,QAAP,CAAgBI,cAA9B;;AAEA,UAAIW,KAAJ,EAAW;AACT,cAAMC,cAAc,GAAGxB,KAAK,CAACL,KAAN,CAAYG,wBAAZ,CAAqCqB,OAArC,CAA6CI,KAAK,CAACR,iBAAnD,CAAvB;AACA,cAAMU,kCAAkC,GAAGzB,KAAK,CAACL,KAAN,CAAYE,mBAAZ,CAAgCU,MAAhC,CAAwCC,QAAQ,IAAIA,QAAQ,CAACI,cAA7D,CAA3C;AACA,cAAMc,iBAAiB,GAAGD,kCAAkC,CAAClB,MAAnC,CAA2CC,QAAQ,IAAIA,QAAQ,CAACI,cAAT,CAAwBG,iBAAxB,KAA8CQ,KAAK,CAACR,iBAA3G,CAA1B;AAEA,cAAMY,sBAAsB,GAAG3B,KAAK,CAACL,KAAN,CAAYE,mBAAZ,CAAgCU,MAAhC,CAAwCC,QAAQ,IAAI,CAACkB,iBAAiB,CAACE,QAAlB,CAA2BpB,QAA3B,CAArD,CAA/B;AAEAY,QAAAA,QAAQ,GAAG,EACT,GAAGA,QADM;AAEPzB,UAAAA,KAAK,EAAE,EACL,GAAGyB,QAAQ,CAACzB,KADP;AAELG,YAAAA,wBAAwB,EAAE,CAAC,GAAGE,KAAK,CAACL,KAAN,CAAYG,wBAAZ,CAAqCwB,KAArC,CAA2C,CAA3C,EAA8CE,cAA9C,CAAJ,EAAmE,GAAGxB,KAAK,CAACL,KAAN,CAAYG,wBAAZ,CAAqCwB,KAArC,CAA4CE,cAAc,GAAG,CAA7D,CAAtE,CAFrB;AAGL3B,YAAAA,mBAAmB,EAAE8B;AAHhB;AAFA,SAAX;AAQD;;AAED,aAAOP,QAAP;;AAEF,SAAK,mBAAL;AACE,aAAO,EACL,GAAGpB,KADE;AAEHT,QAAAA,iBAAiB,EAAE;AAFhB,OAAP;;AAKF,SAAK,aAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELR,QAAAA,OAAO,EAAE;AACPE,UAAAA,UAAU,EAAEO,MAAM,CAACT,OAAP,CAAeE;AADpB;AAFJ,OAAP;;AAMF,SAAK,mBAAL;AACE,YAAMc,QAAQ,GAAGR,KAAK,CAACR,OAAN,CAAcE,UAAd,CAAyBmC,IAAzB,CAA+BrB,QAAQ,IAAIA,QAAQ,CAACa,EAAT,IAAepB,MAAM,CAAC6B,IAAP,CAAYC,UAA3B,IAAyCvB,QAAQ,CAACH,OAAT,IAAoBJ,MAAM,CAAC6B,IAAP,CAAYzB,OAApH,CAAjB;AACA,YAAM2B,aAAa,GAAGhC,KAAK,CAACR,OAAN,CAAcE,UAAd,CAAyByB,OAAzB,CAAiCX,QAAjC,CAAtB;AACA,YAAMsB,IAAI,GAAGtB,QAAQ,CAACyB,KAAT,CAAeJ,IAAf,CAAqBK,CAAC,IAAIA,CAAC,CAACC,MAAF,IAAYlC,MAAM,CAAC6B,IAAP,CAAYK,MAAlD,CAAb;AACA,YAAMC,SAAS,GAAG5B,QAAQ,CAACyB,KAAT,CAAed,OAAf,CAAuBW,IAAvB,CAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACF;AACE,aAAO,EAAC,GAAG9B;AAAJ,OAAP;AAjGJ;AAqGD;;AAED,eAAeD,iBAAf","sourcesContent":["// import { combineReducers } from 'redux';\r\n\r\nconst defaultState = {\r\n  clickedAssemblyId: null,\r\n  machine: {\r\n    completedMachine: false,\r\n    assemblies: []\r\n  },\r\n  model: {\r\n    allAssemblies: [],\r\n    remainingAssemblies: [],\r\n    remainingPickOneGroupIds: []\r\n  }\r\n}\r\n\r\nfunction newMachineReducer(state = defaultState, action) {\r\n  switch (action.type) {\r\n    case 'RESET_MACHINE':\r\n      return defaultState\r\n    case 'ADD_MODEL':\r\n      return Object.assign({}, {...state}, {modelId: action.modelId})\r\n    case 'ADD_ALL_ASSEMBLIES':\r\n      // This only gets called once to add all machine assemblies from fetch to the store\r\n      const requiredAssemblies = action.assemblies.filter( assembly => assembly.required_assembly)\r\n      const unrequiredAssemblies = action.assemblies.filter( assembly => !assembly.required_assembly)\r\n\r\n      // getting all pickOneGroups and adding it to store\r\n      const allPickOneGroups = action.assemblies.filter( assembly => assembly.pick_one_group )\r\n      const pickOneGroupIds = allPickOneGroups.map( assembly => assembly.pick_one_group.pick_one_group_id )\r\n      const uniquePickOneGroupIds = [...new Set(pickOneGroupIds)]\r\n\r\n      return {\r\n        ...state,\r\n          machine: {\r\n            assemblies: requiredAssemblies\r\n          },\r\n          model: {\r\n            ...state.model,\r\n              allAssemblies: action.assemblies,\r\n              remainingAssemblies: unrequiredAssemblies,\r\n              remainingPickOneGroupIds: uniquePickOneGroupIds\r\n          }\r\n      }\r\n    case 'ADD_ASSEMBLY':\r\n      // this takes one assembly and adds it to the machine assembly (the one we're building)\r\n      // and removes it from the list of remaining assemblies that are available for selection\r\n\r\n      const indexOfAddedAssembly = state.model.remainingAssemblies.indexOf(action.assembly)\r\n\r\n      let newState = {\r\n        ...state,\r\n        clickedAssemblyId: action.assembly.id,\r\n        machine: {\r\n          ...state.machine,\r\n          assemblies: [...state.machine.assemblies, action.assembly]\r\n        },\r\n        model: {\r\n          ...state.model,\r\n          remainingAssemblies: [...state.model.remainingAssemblies.slice(0, indexOfAddedAssembly), ...state.model.remainingAssemblies.slice(indexOfAddedAssembly + 1)]\r\n        }\r\n      }\r\n\r\n      // determines if the selected assembly belongs to a 'pick one group.' if it does, all other items in the group will also be\r\n      // removed as selection options.\r\n      const group = action.assembly.pick_one_group\r\n      \r\n      if (group) {\r\n        const indexOfGroupId = state.model.remainingPickOneGroupIds.indexOf(group.pick_one_group_id)\r\n        const remainingAssembliesInPickOneGroups = state.model.remainingAssemblies.filter( assembly => assembly.pick_one_group)\r\n        const assembliesInGroup = remainingAssembliesInPickOneGroups.filter( assembly => assembly.pick_one_group.pick_one_group_id === group.pick_one_group_id )\r\n\r\n        const newRemainingAssemblies = state.model.remainingAssemblies.filter( assembly => !assembliesInGroup.includes(assembly))\r\n\r\n        newState = {\r\n          ...newState,\r\n            model: {\r\n              ...newState.model,\r\n              remainingPickOneGroupIds: [...state.model.remainingPickOneGroupIds.slice(0, indexOfGroupId), ...state.model.remainingPickOneGroupIds.slice( indexOfGroupId + 1) ],\r\n              remainingAssemblies: newRemainingAssemblies\r\n            }\r\n        }\r\n      }\r\n\r\n      return newState;\r\n\r\n    case 'REMOVE_CLICKED_ID':\r\n      return {\r\n        ...state,\r\n          clickedAssemblyId: null\r\n      }\r\n\r\n    case 'ADD_MACHINE':\r\n      return {\r\n        ...state,\r\n        machine: {\r\n          assemblies: action.machine.assemblies\r\n        }\r\n      }\r\n    case 'CHANGE_ITEM_PRICE':\r\n      const assembly = state.machine.assemblies.find( assembly => assembly.id == action.item.assemblyId && assembly.modelId == action.item.modelId)\r\n      const assemblyIndex = state.machine.assemblies.indexOf(assembly)\r\n      const item = assembly.items.find( i => i.itemId == action.item.itemId)\r\n      const itemIndex = assembly.items.indexOf(item)\r\n\r\n      // debugger;\r\n      // return {\r\n      //   ...state,\r\n      //   machine: {\r\n      //     ...state.machine,\r\n      //     assemblies: []\r\n      //   }\r\n      // }\r\n    default:\r\n      return {...state}\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default newMachineReducer;\r\n"]},"metadata":{},"sourceType":"module"}