{"ast":null,"code":"// import { combineReducers } from 'redux';\nfunction newMachineReducer(state = {\n  machine: {\n    assemblies: []\n  },\n  model: {\n    allAssemblies: [],\n    remainingAssemblies: []\n  }\n}, action) {\n  const indexOfAddedAssembly = state.model.allAssemblies.indexOf(action.assembly);\n\n  switch (action.type) {\n    case 'ADD_MODEL':\n      return Object.assign({}, { ...state\n      }, {\n        modelId: action.modelId\n      });\n\n    case 'ADD_ALL_ASSEMBLIES':\n      return { ...state,\n        model: { ...state.model,\n          allAssemblies: action.assemblies,\n          remainingAssemblies: action.assemblies\n        }\n      };\n\n    case 'ADD_ASSEMBLY':\n      return { ...state,\n        machine: { ...state.machine,\n          assemblies: [...state.machine.assemblies, action.assembly]\n        },\n        model: { ...state.model,\n          remainingAssemblies: [...state.model.remainingAssemblies.slice(0, indexOfAddedAssembly), ...state.model.remainingAssemblies.slice(indexOfAddedAssembly + 1)]\n        }\n      };\n\n    default:\n      return { ...state\n      };\n  }\n}\n\nexport default newMachineReducer;","map":{"version":3,"sources":["/home/sbb3391/code/projects/react-proposal-generator/src/reducers/newMachineReducer.js"],"names":["newMachineReducer","state","machine","assemblies","model","allAssemblies","remainingAssemblies","action","indexOfAddedAssembly","indexOf","assembly","type","Object","assign","modelId","slice"],"mappings":"AAAA;AAEA,SAASA,iBAAT,CAA2BC,KAAK,GAAG;AACjCC,EAAAA,OAAO,EAAE;AACPC,IAAAA,UAAU,EAAE;AADL,GADwB;AAIjCC,EAAAA,KAAK,EAAE;AACLC,IAAAA,aAAa,EAAE,EADV;AAELC,IAAAA,mBAAmB,EAAE;AAFhB;AAJ0B,CAAnC,EAQGC,MARH,EAQW;AACT,QAAMC,oBAAoB,GAAGP,KAAK,CAACG,KAAN,CAAYC,aAAZ,CAA0BI,OAA1B,CAAkCF,MAAM,CAACG,QAAzC,CAA7B;;AACA,UAAQH,MAAM,CAACI,IAAf;AACE,SAAK,WAAL;AACE,aAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,EAAC,GAAGZ;AAAJ,OAAlB,EAA8B;AAACa,QAAAA,OAAO,EAAEP,MAAM,CAACO;AAAjB,OAA9B,CAAP;;AACF,SAAK,oBAAL;AACE,aAAO,EACL,GAAGb,KADE;AAEHG,QAAAA,KAAK,EAAE,EACL,GAAGH,KAAK,CAACG,KADJ;AAEHC,UAAAA,aAAa,EAAEE,MAAM,CAACJ,UAFnB;AAGHG,UAAAA,mBAAmB,EAAEC,MAAM,CAACJ;AAHzB;AAFJ,OAAP;;AAQF,SAAK,cAAL;AACE,aAAO,EACL,GAAGF,KADE;AAEHC,QAAAA,OAAO,EAAE,EACP,GAAGD,KAAK,CAACC,OADF;AAELC,UAAAA,UAAU,EAAE,CAAC,GAAGF,KAAK,CAACC,OAAN,CAAcC,UAAlB,EAA8BI,MAAM,CAACG,QAArC;AAFP,SAFN;AAMHN,QAAAA,KAAK,EAAE,EACL,GAAGH,KAAK,CAACG,KADJ;AAEHE,UAAAA,mBAAmB,EAAE,CAAC,GAAGL,KAAK,CAACG,KAAN,CAAYE,mBAAZ,CAAgCS,KAAhC,CAAsC,CAAtC,EAAyCP,oBAAzC,CAAJ,EAAoE,GAAGP,KAAK,CAACG,KAAN,CAAYE,mBAAZ,CAAgCS,KAAhC,CAAsCP,oBAAoB,GAAG,CAA7D,CAAvE;AAFlB;AANJ,OAAP;;AAYF;AACE,aAAO,EAAC,GAAGP;AAAJ,OAAP;AA1BJ;AA4BD;;AAED,eAAeD,iBAAf","sourcesContent":["// import { combineReducers } from 'redux';\r\n\r\nfunction newMachineReducer(state = {\r\n  machine: {\r\n    assemblies: []\r\n  },\r\n  model: {\r\n    allAssemblies: [],\r\n    remainingAssemblies: []\r\n  }\r\n}, action) {\r\n  const indexOfAddedAssembly = state.model.allAssemblies.indexOf(action.assembly)\r\n  switch (action.type) {\r\n    case 'ADD_MODEL':\r\n      return Object.assign({}, {...state}, {modelId: action.modelId})\r\n    case 'ADD_ALL_ASSEMBLIES':\r\n      return {\r\n        ...state,\r\n          model: {\r\n            ...state.model,\r\n              allAssemblies: action.assemblies,\r\n              remainingAssemblies: action.assemblies\r\n          }\r\n      }\r\n    case 'ADD_ASSEMBLY':\r\n      return {\r\n        ...state,\r\n          machine: {\r\n            ...state.machine,\r\n              assemblies: [...state.machine.assemblies, action.assembly]\r\n          },\r\n          model: {\r\n            ...state.model,\r\n              remainingAssemblies: [...state.model.remainingAssemblies.slice(0, indexOfAddedAssembly), ...state.model.remainingAssemblies.slice(indexOfAddedAssembly + 1)]\r\n          }\r\n         \r\n      }\r\n    default:\r\n      return {...state}\r\n  }\r\n}\r\n\r\nexport default newMachineReducer;\r\n"]},"metadata":{},"sourceType":"module"}