{"ast":null,"code":"import pdfMake from \"pdfmake/build/pdfmake\";\nimport pdfFonts from \"pdfmake/build/vfs_fonts\";\npdfMake.vfs = pdfFonts.pdfMake.vfs;\n\nconst pdf = machine => {\n  // let itemsTable = {\n  //   table: {\n  //     body: [\n  //       [{text: 'All of the items in this configuration', colSpan: 2}],\n  //       []\n  //     ]\n  //   }\n  // }\n  const addMachineItems = (itemsTable, machineAssemblies) => {\n    let newTable = itemsTable; // This needs to be simpler. Items array should be defined in state because it is used in multiple other places.\n\n    let itemsArray = [];\n    machineAssemblies.forEach(mi => {\n      mi.items.forEach(item => {\n        itemsArray.push(item);\n      });\n    });\n    itemsArray.forEach(item => {\n      switch (newTable.table.body[newTable.table.body.length - 1].length) {\n        case 0:\n          let newElement = [];\n          newElement.push(item.description);\n          newTable.table.body[newTable.table.body.length - 1].push(newElement);\n          break;\n\n        case 1:\n          let newArrElement = [];\n          newArrElement.push(item.description);\n          newTable.table.body[newTable.table.body.length - 1].push(newArrElement);\n          break;\n\n        case 2:\n          let newRow = [[]];\n          newRow[0].push(item.description);\n          newTable.table.body.push(newRow);\n          break;\n      }\n    });\n    return addItemsToDd(dd, newTable);\n  };\n\n  const addItemsToDd = (documentData, machineItems) => {\n    const newDd = { ...documentData,\n      content: [...documentData.content, machineItems]\n    };\n    console.log(\"dd\", newDd);\n    return newDd;\n  };\n\n  let dd = {\n    content: [{\n      text: 'This paragraph uses header style and extends the alignment property',\n      style: 'header',\n      alignment: 'center'\n    }, {\n      table: {\n        body: body\n      }\n    }]\n  };\n  pdfMake.createPdf(dd).open();\n};\n\nexport { pdf };","map":{"version":3,"sources":["/home/sbb3391/code/projects/react-proposal-generator/src/components/pdf.js"],"names":["pdfMake","pdfFonts","vfs","pdf","machine","addMachineItems","itemsTable","machineAssemblies","newTable","itemsArray","forEach","mi","items","item","push","table","body","length","newElement","description","newArrElement","newRow","addItemsToDd","dd","documentData","machineItems","newDd","content","console","log","text","style","alignment","createPdf","open"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACAD,OAAO,CAACE,GAAR,GAAcD,QAAQ,CAACD,OAAT,CAAiBE,GAA/B;;AAEA,MAAMC,GAAG,GAAIC,OAAD,IAAa;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,QAAMC,eAAe,GAAG,CAACC,UAAD,EAAaC,iBAAb,KAAmC;AAEzD,QAAIC,QAAQ,GAAGF,UAAf,CAFyD,CAGzD;;AACA,QAAIG,UAAU,GAAG,EAAjB;AAEAF,IAAAA,iBAAiB,CAACG,OAAlB,CAA4BC,EAAD,IAAQ;AACjCA,MAAAA,EAAE,CAACC,KAAH,CAASF,OAAT,CAAkBG,IAAI,IAAI;AACxBJ,QAAAA,UAAU,CAACK,IAAX,CAAgBD,IAAhB;AACD,OAFD;AAID,KALD;AAOAJ,IAAAA,UAAU,CAACC,OAAX,CAAoBG,IAAI,IAAI;AAC1B,cAAQL,QAAQ,CAACO,KAAT,CAAeC,IAAf,CAAoBR,QAAQ,CAACO,KAAT,CAAeC,IAAf,CAAoBC,MAApB,GAA6B,CAAjD,EAAoDA,MAA5D;AACE,aAAK,CAAL;AACE,cAAIC,UAAU,GAAG,EAAjB;AACAA,UAAAA,UAAU,CAACJ,IAAX,CAAgBD,IAAI,CAACM,WAArB;AACAX,UAAAA,QAAQ,CAACO,KAAT,CAAeC,IAAf,CAAoBR,QAAQ,CAACO,KAAT,CAAeC,IAAf,CAAoBC,MAApB,GAA6B,CAAjD,EAAoDH,IAApD,CAAyDI,UAAzD;AACA;;AACF,aAAK,CAAL;AACE,cAAIE,aAAa,GAAG,EAApB;AACAA,UAAAA,aAAa,CAACN,IAAd,CAAmBD,IAAI,CAACM,WAAxB;AACAX,UAAAA,QAAQ,CAACO,KAAT,CAAeC,IAAf,CAAoBR,QAAQ,CAACO,KAAT,CAAeC,IAAf,CAAoBC,MAApB,GAA6B,CAAjD,EAAoDH,IAApD,CAAyDM,aAAzD;AACA;;AACF,aAAK,CAAL;AACE,cAAIC,MAAM,GAAG,CAAC,EAAD,CAAb;AACAA,UAAAA,MAAM,CAAC,CAAD,CAAN,CAAUP,IAAV,CAAeD,IAAI,CAACM,WAApB;AACAX,UAAAA,QAAQ,CAACO,KAAT,CAAeC,IAAf,CAAoBF,IAApB,CAAyBO,MAAzB;AACA;AAfJ;AAiBD,KAlBD;AAoBA,WAAOC,YAAY,CAACC,EAAD,EAAKf,QAAL,CAAnB;AACD,GAlCD;;AAqCA,QAAMc,YAAY,GAAG,CAACE,YAAD,EAAeC,YAAf,KAAgC;AACpD,UAAMC,KAAK,GAAG,EACZ,GAAGF,YADS;AAEZG,MAAAA,OAAO,EAAE,CACP,GAAGH,YAAY,CAACG,OADT,EAEPF,YAFO;AAFG,KAAd;AAQAG,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBH,KAAlB;AACC,WAAOA,KAAP;AACD,GAXD;;AAaA,MAAIH,EAAE,GAAG;AACPI,IAAAA,OAAO,EAAE,CACP;AACEG,MAAAA,IAAI,EAAE,qEADR;AAEEC,MAAAA,KAAK,EAAE,QAFT;AAGEC,MAAAA,SAAS,EAAE;AAHb,KADO,EAMP;AACEjB,MAAAA,KAAK,EAAE;AACLC,QAAAA,IAAI,EAAEA;AADD;AADT,KANO;AADF,GAAT;AAgBAhB,EAAAA,OAAO,CAACiC,SAAR,CAAkBV,EAAlB,EAAsBW,IAAtB;AAED,CA/ED;;AAiFA,SAAS/B,GAAT","sourcesContent":["import pdfMake from \"pdfmake/build/pdfmake\";\r\nimport pdfFonts from \"pdfmake/build/vfs_fonts\";\r\npdfMake.vfs = pdfFonts.pdfMake.vfs;\r\n\r\nconst pdf = (machine) => {\r\n\r\n  // let itemsTable = {\r\n  //   table: {\r\n  //     body: [\r\n  //       [{text: 'All of the items in this configuration', colSpan: 2}],\r\n  //       []\r\n  //     ]\r\n  //   }\r\n  // }\r\n\r\n  const addMachineItems = (itemsTable, machineAssemblies) => {\r\n\r\n    let newTable = itemsTable\r\n    // This needs to be simpler. Items array should be defined in state because it is used in multiple other places.\r\n    let itemsArray = []\r\n\r\n    machineAssemblies.forEach( (mi) => {\r\n      mi.items.forEach( item => {\r\n        itemsArray.push(item)\r\n      })\r\n      \r\n    })\r\n\r\n    itemsArray.forEach( item => {\r\n      switch (newTable.table.body[newTable.table.body.length - 1].length) {\r\n        case 0:\r\n          let newElement = []\r\n          newElement.push(item.description)\r\n          newTable.table.body[newTable.table.body.length - 1].push(newElement);\r\n          break\r\n        case 1:\r\n          let newArrElement = []\r\n          newArrElement.push(item.description)\r\n          newTable.table.body[newTable.table.body.length - 1].push(newArrElement);\r\n          break\r\n        case 2:\r\n          let newRow = [[]]\r\n          newRow[0].push(item.description)\r\n          newTable.table.body.push(newRow)\r\n          break\r\n      }\r\n    })\r\n\r\n    return addItemsToDd(dd, newTable)\r\n  }\r\n\r\n\r\n  const addItemsToDd = (documentData, machineItems) => {\r\n   const newDd = {\r\n     ...documentData,\r\n     content: [\r\n       ...documentData.content,\r\n       machineItems\r\n     ]\r\n   }\r\n\r\n   console.log(\"dd\", newDd)\r\n    return newDd\r\n  }\r\n\r\n  let dd = {\r\n    content: [\r\n      {\r\n        text: 'This paragraph uses header style and extends the alignment property',\r\n        style: 'header',\r\n        alignment: 'center'\r\n      },\r\n      {\r\n        table: {\r\n          body: body\r\n        }\r\n      }\r\n      \r\n    ]\r\n  }\r\n  \r\n  pdfMake.createPdf(dd).open();\r\n\r\n}\r\n\r\nexport { pdf }"]},"metadata":{},"sourceType":"module"}