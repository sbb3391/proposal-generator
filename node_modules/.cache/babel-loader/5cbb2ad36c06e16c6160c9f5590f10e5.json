{"ast":null,"code":"import pdfMake from \"pdfmake/build/pdfmake\";\nimport pdfFonts from \"pdfmake/build/vfs_fonts\";\npdfMake.vfs = pdfFonts.pdfMake.vfs;\n\nconst pdf = machine => {\n  let itemsTable = {\n    table: {\n      body: [[{\n        text: 'All of the items in this configuration',\n        colSpan: 2\n      }], []]\n    }\n  };\n\n  const addMachineItems = (itemsTable, machineAssemblies) => {\n    let body = itemsTable.table.body; // This needs to be simpler. Items array should be defined in state because it is used in multiple other places.\n\n    let itemsArray = [];\n    machineAssemblies.forEach(mi => {\n      mi.items.forEach(item => {\n        itemsArray.push(item);\n      });\n    });\n    itemsArray.forEach(item => {\n      switch (body[body.length - 1].length) {\n        case 0:\n          let newElement = [];\n          newElement.push(item.description);\n          body[newItemsTable.table.body.length - 1].push(newElement);\n          break;\n\n        case 1:\n          let newArrElement = [];\n          newArrElement.push(item.description);\n          body[newItemsTable.table.body.length - 1].push(newArrElement);\n          break;\n\n        case 2:\n          let newRow = [[]];\n          newRow[0].push(item.description);\n          body.push(newRow);\n          break;\n      }\n    });\n    console.log(body);\n    return addItemsToDd(dd, newItemsTable);\n  };\n\n  const addItemsToDd = (documentData, machineItems) => {\n    const newDd = { ...documentData,\n      content: [...documentData.content, machineItems]\n    };\n    return newDd;\n  };\n\n  let dd = {\n    content: [{\n      text: 'This paragraph uses header style and extends the alignment property',\n      style: 'header',\n      alignment: 'center'\n    }]\n  };\n  pdfMake.createPdf(addMachineItems(itemsTable, machine.assemblies)).open();\n};\n\nexport { pdf };","map":{"version":3,"sources":["/home/sbb3391/code/projects/react-proposal-generator/src/components/pdf.js"],"names":["pdfMake","pdfFonts","vfs","pdf","machine","itemsTable","table","body","text","colSpan","addMachineItems","machineAssemblies","itemsArray","forEach","mi","items","item","push","length","newElement","description","newItemsTable","newArrElement","newRow","console","log","addItemsToDd","dd","documentData","machineItems","newDd","content","style","alignment","createPdf","assemblies","open"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACAD,OAAO,CAACE,GAAR,GAAcD,QAAQ,CAACD,OAAT,CAAiBE,GAA/B;;AAEA,MAAMC,GAAG,GAAIC,OAAD,IAAa;AAEvB,MAAIC,UAAU,GAAG;AACfC,IAAAA,KAAK,EAAE;AACLC,MAAAA,IAAI,EAAE,CACJ,CAAC;AAACC,QAAAA,IAAI,EAAE,wCAAP;AAAiDC,QAAAA,OAAO,EAAE;AAA1D,OAAD,CADI,EAEJ,EAFI;AADD;AADQ,GAAjB;;AASA,QAAMC,eAAe,GAAG,CAACL,UAAD,EAAaM,iBAAb,KAAmC;AAEzD,QAAIJ,IAAI,GAAGF,UAAU,CAACC,KAAX,CAAiBC,IAA5B,CAFyD,CAGzD;;AACA,QAAIK,UAAU,GAAG,EAAjB;AAEAD,IAAAA,iBAAiB,CAACE,OAAlB,CAA4BC,EAAD,IAAQ;AACjCA,MAAAA,EAAE,CAACC,KAAH,CAASF,OAAT,CAAkBG,IAAI,IAAI;AACxBJ,QAAAA,UAAU,CAACK,IAAX,CAAgBD,IAAhB;AACD,OAFD;AAID,KALD;AAOAJ,IAAAA,UAAU,CAACC,OAAX,CAAoBG,IAAI,IAAI;AAC1B,cAAQT,IAAI,CAACA,IAAI,CAACW,MAAL,GAAc,CAAf,CAAJ,CAAsBA,MAA9B;AACE,aAAK,CAAL;AACE,cAAIC,UAAU,GAAG,EAAjB;AACAA,UAAAA,UAAU,CAACF,IAAX,CAAgBD,IAAI,CAACI,WAArB;AACAb,UAAAA,IAAI,CAACc,aAAa,CAACf,KAAd,CAAoBC,IAApB,CAAyBW,MAAzB,GAAkC,CAAnC,CAAJ,CAA0CD,IAA1C,CAA+CE,UAA/C;AACA;;AACF,aAAK,CAAL;AACE,cAAIG,aAAa,GAAG,EAApB;AACAA,UAAAA,aAAa,CAACL,IAAd,CAAmBD,IAAI,CAACI,WAAxB;AACAb,UAAAA,IAAI,CAACc,aAAa,CAACf,KAAd,CAAoBC,IAApB,CAAyBW,MAAzB,GAAkC,CAAnC,CAAJ,CAA0CD,IAA1C,CAA+CK,aAA/C;AACA;;AACF,aAAK,CAAL;AACE,cAAIC,MAAM,GAAG,CAAC,EAAD,CAAb;AACAA,UAAAA,MAAM,CAAC,CAAD,CAAN,CAAUN,IAAV,CAAeD,IAAI,CAACI,WAApB;AACAb,UAAAA,IAAI,CAACU,IAAL,CAAUM,MAAV;AACA;AAfJ;AAiBD,KAlBD;AAoBAC,IAAAA,OAAO,CAACC,GAAR,CAAYlB,IAAZ;AAEA,WAAOmB,YAAY,CAACC,EAAD,EAAKN,aAAL,CAAnB;AACD,GApCD;;AAuCA,QAAMK,YAAY,GAAG,CAACE,YAAD,EAAeC,YAAf,KAAgC;AACpD,UAAMC,KAAK,GAAG,EACZ,GAAGF,YADS;AAEZG,MAAAA,OAAO,EAAE,CACP,GAAGH,YAAY,CAACG,OADT,EAEPF,YAFO;AAFG,KAAd;AAQC,WAAOC,KAAP;AACD,GAVD;;AAYA,MAAIH,EAAE,GAAG;AACPI,IAAAA,OAAO,EAAE,CACP;AACEvB,MAAAA,IAAI,EAAE,qEADR;AAEEwB,MAAAA,KAAK,EAAE,QAFT;AAGEC,MAAAA,SAAS,EAAE;AAHb,KADO;AADF,GAAT;AAWAjC,EAAAA,OAAO,CAACkC,SAAR,CAAkBxB,eAAe,CAACL,UAAD,EAAaD,OAAO,CAAC+B,UAArB,CAAjC,EAAmEC,IAAnE;AAED,CA3ED;;AA6EA,SAASjC,GAAT","sourcesContent":["import pdfMake from \"pdfmake/build/pdfmake\";\r\nimport pdfFonts from \"pdfmake/build/vfs_fonts\";\r\npdfMake.vfs = pdfFonts.pdfMake.vfs;\r\n\r\nconst pdf = (machine) => {\r\n\r\n  let itemsTable = {\r\n    table: {\r\n      body: [\r\n        [{text: 'All of the items in this configuration', colSpan: 2}],\r\n        []\r\n      ]\r\n    }\r\n  }\r\n\r\n  const addMachineItems = (itemsTable, machineAssemblies) => {\r\n\r\n    let body = itemsTable.table.body\r\n    // This needs to be simpler. Items array should be defined in state because it is used in multiple other places.\r\n    let itemsArray = []\r\n\r\n    machineAssemblies.forEach( (mi) => {\r\n      mi.items.forEach( item => {\r\n        itemsArray.push(item)\r\n      })\r\n      \r\n    })\r\n\r\n    itemsArray.forEach( item => {\r\n      switch (body[body.length - 1].length) {\r\n        case 0:\r\n          let newElement = []\r\n          newElement.push(item.description)\r\n          body[newItemsTable.table.body.length - 1].push(newElement);\r\n          break\r\n        case 1:\r\n          let newArrElement = []\r\n          newArrElement.push(item.description)\r\n          body[newItemsTable.table.body.length - 1].push(newArrElement);\r\n          break\r\n        case 2:\r\n          let newRow = [[]]\r\n          newRow[0].push(item.description)\r\n          body.push(newRow)\r\n          break\r\n      }\r\n    })\r\n\r\n    console.log(body)\r\n\r\n    return addItemsToDd(dd, newItemsTable)\r\n  }\r\n\r\n\r\n  const addItemsToDd = (documentData, machineItems) => {\r\n   const newDd = {\r\n     ...documentData,\r\n     content: [\r\n       ...documentData.content,\r\n       machineItems\r\n     ]\r\n   }\r\n\r\n    return newDd\r\n  }\r\n\r\n  let dd = {\r\n    content: [\r\n      {\r\n        text: 'This paragraph uses header style and extends the alignment property',\r\n        style: 'header',\r\n        alignment: 'center'\r\n      }\r\n      \r\n    ]\r\n  }\r\n  \r\n  pdfMake.createPdf(addMachineItems(itemsTable, machine.assemblies)).open();\r\n\r\n}\r\n\r\nexport { pdf }"]},"metadata":{},"sourceType":"module"}