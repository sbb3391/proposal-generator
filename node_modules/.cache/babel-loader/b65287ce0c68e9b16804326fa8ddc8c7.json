{"ast":null,"code":"import pdfMake from \"pdfmake/build/pdfmake\";\nimport pdfFonts from \"pdfmake/build/vfs_fonts\";\npdfMake.vfs = pdfFonts.pdfMake.vfs;\n\nconst pdf = machine => {\n  // let itemsTable = {\n  //   table: {\n  //     body: [\n  //       [{text: 'All of the items in this configuration', colSpan: 2}],\n  //       []\n  //     ]\n  //   }\n  // }\n  let itemsArray = [];\n  let body = [[]];\n  machine.assemblies.forEach(assembly => {\n    switch (body[body.length - 1].length) {\n      case 0:\n        let newAssembly = {\n          stack: [{\n            text: assembly.name,\n            fontSize: 8,\n            margin: [0, 20, 0, 0]\n          }]\n        };\n\n        if (assembly.items > 1) {\n          newAssembly.stack.push({\n            ul: []\n          });\n          assembly.items.forEach(item);\n        }\n\n        body[body.length - 1].push(newAssembly);\n        break;\n\n      case 1:\n        body[body.length - 1].push({\n          text: assembly.name,\n          fontSize: 8,\n          margin: [0, 20, 0]\n        });\n        break;\n\n      case 2:\n        let newRow = [];\n        newRow.push({\n          text: assembly.name,\n          fontSize: 8,\n          margin: [0, 20, 0, 0]\n        });\n        body.push(newRow);\n\n        if (machine.assemblies.indexOf(assembly) === machine.assemblies.length - 1 && body[body.length - 1].length === 1) {\n          body[body.length - 1].push([\"a placeholder to finish table\"]);\n        }\n\n        break;\n    }\n  });\n  let dd = {\n    content: [{\n      text: 'This paragraph uses header style and extends the alignment property',\n      style: 'header',\n      alignment: 'center'\n    }, {\n      table: {\n        widths: [250, 250],\n        body: body\n      },\n      layout: 'noBorders'\n    }]\n  };\n  console.log(body);\n  pdfMake.createPdf(dd).open();\n};\n\nexport { pdf };","map":{"version":3,"sources":["/home/sbb3391/code/projects/react-proposal-generator/src/components/pdf.js"],"names":["pdfMake","pdfFonts","vfs","pdf","machine","itemsArray","body","assemblies","forEach","assembly","length","newAssembly","stack","text","name","fontSize","margin","items","push","ul","item","newRow","indexOf","dd","content","style","alignment","table","widths","layout","console","log","createPdf","open"],"mappings":"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","sourcesContent":["import pdfMake from \"pdfmake/build/pdfmake\";\r\nimport pdfFonts from \"pdfmake/build/vfs_fonts\";\r\npdfMake.vfs = pdfFonts.pdfMake.vfs;\r\n\r\nconst pdf = (machine) => {\r\n\r\n  // let itemsTable = {\r\n  //   table: {\r\n  //     body: [\r\n  //       [{text: 'All of the items in this configuration', colSpan: 2}],\r\n  //       []\r\n  //     ]\r\n  //   }\r\n  // }\r\n\r\n\r\n  let itemsArray = []\r\n  let body = [\r\n    [\r\n      \r\n    ]\r\n  ]\r\n\r\n  machine.assemblies.forEach( (assembly) => {\r\n    switch (body[body.length - 1].length) {\r\n      case 0:\r\n        let newAssembly = {\r\n          stack: [\r\n            {text: assembly.name, fontSize: 8, margin: [0, 20, 0, 0]}\r\n          ]\r\n        }\r\n\r\n        if (assembly.items > 1) {\r\n          newAssembly.stack.push( { ul: [] } )\r\n          assembly.items.forEach( item )\r\n        }\r\n\r\n        body[body.length - 1].push(newAssembly);\r\n\r\n        break\r\n      case 1:\r\n        body[body.length - 1].push({text: assembly.name, fontSize: 8, margin: [0, 20, 0]})\r\n        break\r\n      case 2:\r\n        let newRow = []\r\n        newRow.push({text: assembly.name, fontSize: 8, margin: [0, 20, 0, 0]})\r\n        body.push(newRow)\r\n\r\n        if (machine.assemblies.indexOf(assembly) === machine.assemblies.length - 1 && body[body.length - 1].length === 1) {\r\n          body[body.length - 1].push([\"a placeholder to finish table\"])\r\n        }\r\n        break\r\n    }\r\n  })\r\n\r\n  let dd = {\r\n    content: [\r\n      {\r\n        text: 'This paragraph uses header style and extends the alignment property',\r\n        style: 'header',\r\n        alignment: 'center'\r\n      },\r\n      {\r\n        table: {\r\n          widths: [250, 250],\r\n          body: body\r\n        },\r\n        layout: 'noBorders'\r\n      }\r\n      \r\n    ]\r\n  }\r\n\r\n  console.log(body)\r\n\r\n  pdfMake.createPdf(dd).open();\r\n\r\n}\r\n\r\nexport { pdf }"]},"metadata":{},"sourceType":"module"}