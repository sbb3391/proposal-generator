{"ast":null,"code":"import pdfMake from \"pdfmake/build/pdfmake\";\nimport pdfFonts from \"pdfmake/build/vfs_fonts\";\npdfMake.vfs = pdfFonts.pdfMake.vfs;\n\nconst pdf = machine => {\n  // let itemsTable = {\n  //   table: {\n  //     body: [\n  //       [{text: 'All of the items in this configuration', colSpan: 2}],\n  //       []\n  //     ]\n  //   }\n  // }\n  let itemsArray = [];\n  let body = [[]];\n  machine.assemblies.forEach(assembly => {\n    mi.items.forEach(item => {\n      itemsArray.push(item);\n    });\n  });\n  itemsArray.forEach(item => {\n    switch (body[body.length - 1].length) {\n      case 0:\n        body[body.length - 1].push({\n          text: item.description,\n          fontSize: 8\n        });\n        break;\n\n      case 1:\n        body[body.length - 1].push({\n          text: item.description,\n          fontSize: 8\n        });\n        break;\n\n      case 2:\n        let newRow = [];\n        newRow.push({\n          text: item.description,\n          fontSize: 8\n        });\n        body.push(newRow);\n\n        if (itemsArray.indexOf(item) === itemsArray.length - 1 && body[body.length - 1].length === 1) {\n          body[body.length - 1].push([\"a placeholder to finish table\"]);\n        }\n\n        break;\n    }\n  });\n  console.log(body);\n  let dd = {\n    content: [{\n      text: 'This paragraph uses header style and extends the alignment property',\n      style: 'header',\n      alignment: 'center'\n    }, {\n      table: {\n        body: body\n      }\n    }]\n  };\n  console.log(body);\n  pdfMake.createPdf(dd).open();\n};\n\nexport { pdf };","map":{"version":3,"sources":["/home/sbb3391/code/projects/react-proposal-generator/src/components/pdf.js"],"names":["pdfMake","pdfFonts","vfs","pdf","machine","itemsArray","body","assemblies","forEach","assembly","mi","items","item","push","length","text","description","fontSize","newRow","indexOf","console","log","dd","content","style","alignment","table","createPdf","open"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACAD,OAAO,CAACE,GAAR,GAAcD,QAAQ,CAACD,OAAT,CAAiBE,GAA/B;;AAEA,MAAMC,GAAG,GAAIC,OAAD,IAAa;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,MAAIC,UAAU,GAAG,EAAjB;AACA,MAAIC,IAAI,GAAG,CACT,EADS,CAAX;AAMAF,EAAAA,OAAO,CAACG,UAAR,CAAmBC,OAAnB,CAA6BC,QAAD,IAAc;AACxCC,IAAAA,EAAE,CAACC,KAAH,CAASH,OAAT,CAAkBI,IAAI,IAAI;AACxBP,MAAAA,UAAU,CAACQ,IAAX,CAAgBD,IAAhB;AACD,KAFD;AAGD,GAJD;AAMAP,EAAAA,UAAU,CAACG,OAAX,CAAoBI,IAAI,IAAI;AAC1B,YAAQN,IAAI,CAACA,IAAI,CAACQ,MAAL,GAAc,CAAf,CAAJ,CAAsBA,MAA9B;AACE,WAAK,CAAL;AAEER,QAAAA,IAAI,CAACA,IAAI,CAACQ,MAAL,GAAc,CAAf,CAAJ,CAAsBD,IAAtB,CAA2B;AAACE,UAAAA,IAAI,EAAEH,IAAI,CAACI,WAAZ;AAAyBC,UAAAA,QAAQ,EAAE;AAAnC,SAA3B;AACA;;AACF,WAAK,CAAL;AACEX,QAAAA,IAAI,CAACA,IAAI,CAACQ,MAAL,GAAc,CAAf,CAAJ,CAAsBD,IAAtB,CAA2B;AAACE,UAAAA,IAAI,EAAEH,IAAI,CAACI,WAAZ;AAAyBC,UAAAA,QAAQ,EAAE;AAAnC,SAA3B;AACA;;AACF,WAAK,CAAL;AACE,YAAIC,MAAM,GAAG,EAAb;AACAA,QAAAA,MAAM,CAACL,IAAP,CAAY;AAACE,UAAAA,IAAI,EAAEH,IAAI,CAACI,WAAZ;AAAyBC,UAAAA,QAAQ,EAAE;AAAnC,SAAZ;AACAX,QAAAA,IAAI,CAACO,IAAL,CAAUK,MAAV;;AAEA,YAAIb,UAAU,CAACc,OAAX,CAAmBP,IAAnB,MAA6BP,UAAU,CAACS,MAAX,GAAoB,CAAjD,IAAsDR,IAAI,CAACA,IAAI,CAACQ,MAAL,GAAc,CAAf,CAAJ,CAAsBA,MAAtB,KAAiC,CAA3F,EAA8F;AAC5FR,UAAAA,IAAI,CAACA,IAAI,CAACQ,MAAL,GAAc,CAAf,CAAJ,CAAsBD,IAAtB,CAA2B,CAAC,+BAAD,CAA3B;AACD;;AACD;AAhBJ;AAkBD,GAnBD;AAqBAO,EAAAA,OAAO,CAACC,GAAR,CAAYf,IAAZ;AAEA,MAAIgB,EAAE,GAAG;AACPC,IAAAA,OAAO,EAAE,CACP;AACER,MAAAA,IAAI,EAAE,qEADR;AAEES,MAAAA,KAAK,EAAE,QAFT;AAGEC,MAAAA,SAAS,EAAE;AAHb,KADO,EAMP;AACEC,MAAAA,KAAK,EAAE;AACLpB,QAAAA,IAAI,EAAEA;AADD;AADT,KANO;AADF,GAAT;AAgBAc,EAAAA,OAAO,CAACC,GAAR,CAAYf,IAAZ;AAEAN,EAAAA,OAAO,CAAC2B,SAAR,CAAkBL,EAAlB,EAAsBM,IAAtB;AAED,CApED;;AAsEA,SAASzB,GAAT","sourcesContent":["import pdfMake from \"pdfmake/build/pdfmake\";\r\nimport pdfFonts from \"pdfmake/build/vfs_fonts\";\r\npdfMake.vfs = pdfFonts.pdfMake.vfs;\r\n\r\nconst pdf = (machine) => {\r\n\r\n  // let itemsTable = {\r\n  //   table: {\r\n  //     body: [\r\n  //       [{text: 'All of the items in this configuration', colSpan: 2}],\r\n  //       []\r\n  //     ]\r\n  //   }\r\n  // }\r\n\r\n\r\n  let itemsArray = []\r\n  let body = [\r\n    [\r\n      \r\n    ]\r\n  ]\r\n\r\n  machine.assemblies.forEach( (assembly) => {\r\n    mi.items.forEach( item => {\r\n      itemsArray.push(item)\r\n    })\r\n  })\r\n\r\n  itemsArray.forEach( item => {\r\n    switch (body[body.length - 1].length) {\r\n      case 0:\r\n\r\n        body[body.length - 1].push({text: item.description, fontSize: 8});\r\n        break\r\n      case 1:\r\n        body[body.length - 1].push({text: item.description, fontSize: 8})\r\n        break\r\n      case 2:\r\n        let newRow = []\r\n        newRow.push({text: item.description, fontSize: 8})\r\n        body.push(newRow)\r\n\r\n        if (itemsArray.indexOf(item) === itemsArray.length - 1 && body[body.length - 1].length === 1) {\r\n          body[body.length - 1].push([\"a placeholder to finish table\"])\r\n        }\r\n        break\r\n    }\r\n  })\r\n   \r\n  console.log(body)\r\n\r\n  let dd = {\r\n    content: [\r\n      {\r\n        text: 'This paragraph uses header style and extends the alignment property',\r\n        style: 'header',\r\n        alignment: 'center'\r\n      },\r\n      {\r\n        table: {\r\n          body: body\r\n        }\r\n      }\r\n      \r\n    ]\r\n  }\r\n\r\n  console.log(body)\r\n\r\n  pdfMake.createPdf(dd).open();\r\n\r\n}\r\n\r\nexport { pdf }"]},"metadata":{},"sourceType":"module"}