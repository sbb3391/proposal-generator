{"ast":null,"code":"import pdfMake from \"pdfmake/build/pdfmake\";\nimport pdfFonts from \"pdfmake/build/vfs_fonts\";\npdfMake.vfs = pdfFonts.pdfMake.vfs;\n\nconst pdf = machine => {\n  // let itemsTable = {\n  //   table: {\n  //     body: [\n  //       [{text: 'All of the items in this configuration', colSpan: 2}],\n  //       []\n  //     ]\n  //   }\n  // }\n  let body = [[]];\n  machine.assemblies.forEach(assembly => {\n    let newAssembly;\n\n    switch (body[body.length - 1].length) {\n      case 0:\n        newAssembly = {\n          stack: [{\n            text: assembly.name,\n            fontSize: 8,\n            margin: [0, 20, 0, 0]\n          }]\n        };\n\n        if (assembly.items.length > 1) {\n          newAssembly.stack.push({\n            ul: []\n          });\n          assembly.items.forEach(item => {\n            newAssembly.stack[1].ul.push(item.description);\n          });\n        }\n\n        body[body.length - 1].push(newAssembly);\n        break;\n\n      case 1:\n        newAssembly = {\n          stack: [{\n            text: assembly.name,\n            fontSize: 8,\n            margin: [0, 20, 0, 0]\n          }]\n        };\n\n        if (assembly.items.length > 1) {\n          newAssembly.stack.push({\n            ul: []\n          });\n          assembly.items.forEach(item => {\n            newAssembly.stack[1].ul.push(item.description);\n          });\n        }\n\n        body[body.length - 1].push(newAssembly);\n        break;\n\n      case 2:\n        newAssembly = {\n          stack: [{\n            text: assembly.name,\n            fontSize: 8,\n            margin: [0, 20, 0, 0]\n          }]\n        };\n\n        if (assembly.items.length > 1) {\n          newAssembly.stack.push({\n            ul: []\n          });\n          assembly.items.forEach(item => {\n            newAssembly.stack[1].ul.push(item.description);\n          });\n        }\n\n        let newRow = [];\n        newRow.push(newAssembly);\n        body.push(newAssembly);\n\n        if (machine.assemblies.indexOf(assembly) === machine.assemblies.length - 1 && body[body.length - 1].length === 1) {\n          body[body.length - 1].push([\"a placeholder to finish table\"]);\n        }\n\n        break;\n    }\n\n    debugger;\n  }); // let dd = {\n  //   content: [\n  //     {\n  //       text: 'This paragraph uses header style and extends the alignment property',\n  //       style: 'header',\n  //       alignment: 'center'\n  //     },\n  //     {\n  //       table: {\n  //         widths: [250, 250],\n  //         body: body\n  //       },\n  //       layout: 'noBorders'\n  //     }\n  //   ]\n  // }\n\n  let dd = {\n    content: [{\n      text: 'This paragraph uses header style and extends the alignment property',\n      style: 'header',\n      alignment: 'center'\n    }, {\n      table: {\n        widths: [250, 250],\n        body: [[{\n          stack: [{\n            text: \"C14000\",\n            fontSize: 8,\n            margin: [0, 20, 0, 0]\n          }, {\n            ul: [\"Engine\", \"Power Filter 120\", \"Power Filter 220\"]\n          }]\n        }, {\n          stack: [{\n            text: \"C14000\",\n            fontSize: 8,\n            margin: [0, 20, 0, 0]\n          }, {\n            ul: [\"Engine\", \"Power Filter 120\", \"Power Filter 220\"]\n          }]\n        }], [{\n          stack: [{\n            text: \"C14000\",\n            fontSize: 8,\n            margin: [0, 20, 0, 0]\n          }, {\n            ul: [\"Engine\", \"Power Filter 120\", \"Power Filter 220\"]\n          }]\n        }, {\n          stack: [{\n            text: \"C14000\",\n            fontSize: 8,\n            margin: [0, 20, 0, 0]\n          }, {\n            ul: [\"Engine\", \"Power Filter 120\", \"Power Filter 220\"]\n          }]\n        }]]\n      },\n      layout: 'noBorders'\n    }]\n  };\n  console.log(body);\n  pdfMake.createPdf(dd).open();\n};\n\nexport { pdf };","map":{"version":3,"sources":["/home/sbb3391/code/projects/react-proposal-generator/src/components/pdf.js"],"names":["pdfMake","pdfFonts","vfs","pdf","machine","body","assemblies","forEach","assembly","newAssembly","length","stack","text","name","fontSize","margin","items","push","ul","item","description","newRow","indexOf","dd","content","style","alignment","table","widths","layout","console","log","createPdf","open"],"mappings":"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","sourcesContent":["import pdfMake from \"pdfmake/build/pdfmake\";\r\nimport pdfFonts from \"pdfmake/build/vfs_fonts\";\r\npdfMake.vfs = pdfFonts.pdfMake.vfs;\r\n\r\nconst pdf = (machine) => {\r\n\r\n  // let itemsTable = {\r\n  //   table: {\r\n  //     body: [\r\n  //       [{text: 'All of the items in this configuration', colSpan: 2}],\r\n  //       []\r\n  //     ]\r\n  //   }\r\n  // }\r\n\r\n\r\n  let body = [\r\n    [\r\n      \r\n    ]\r\n  ]\r\n\r\n  machine.assemblies.forEach( (assembly) => {\r\n    let newAssembly; \r\n    switch (body[body.length - 1].length) {\r\n      case 0:\r\n        newAssembly = {\r\n          stack: [\r\n            {text: assembly.name, fontSize: 8, margin: [0, 20, 0, 0]}\r\n          ]\r\n        }\r\n        \r\n        if (assembly.items.length > 1) {\r\n          newAssembly.stack.push( { ul: [] } )\r\n          \r\n          assembly.items.forEach( item => {\r\n            newAssembly.stack[1].ul.push(item.description)\r\n          })\r\n        }\r\n\r\n        body[body.length - 1].push(newAssembly);\r\n        break\r\n      case 1:\r\n        newAssembly = {\r\n          stack: [\r\n            {text: assembly.name, fontSize: 8, margin: [0, 20, 0, 0]}\r\n          ]\r\n        }\r\n        \r\n        if (assembly.items.length > 1) {\r\n          newAssembly.stack.push( { ul: [] } )\r\n          \r\n          assembly.items.forEach( item => {\r\n            newAssembly.stack[1].ul.push(item.description)\r\n          })\r\n        }\r\n        \r\n        body[body.length - 1].push(newAssembly)\r\n        break\r\n      case 2:\r\n        newAssembly = {\r\n          stack: [\r\n            {text: assembly.name, fontSize: 8, margin: [0, 20, 0, 0]}\r\n          ]\r\n        }\r\n  \r\n        if (assembly.items.length > 1) {\r\n          newAssembly.stack.push( { ul: [] } )\r\n          \r\n          assembly.items.forEach( item => {\r\n            newAssembly.stack[1].ul.push(item.description)\r\n          })\r\n        }\r\n        \r\n\r\n        let newRow = []\r\n        newRow.push(newAssembly)\r\n        body.push(newAssembly)\r\n        \r\n        if (machine.assemblies.indexOf(assembly) === machine.assemblies.length - 1 && body[body.length - 1].length === 1) {\r\n          body[body.length - 1].push([\"a placeholder to finish table\"])\r\n        }\r\n        break\r\n    }\r\n\r\n    debugger;\r\n  })\r\n\r\n  // let dd = {\r\n  //   content: [\r\n  //     {\r\n  //       text: 'This paragraph uses header style and extends the alignment property',\r\n  //       style: 'header',\r\n  //       alignment: 'center'\r\n  //     },\r\n  //     {\r\n  //       table: {\r\n  //         widths: [250, 250],\r\n  //         body: body\r\n  //       },\r\n  //       layout: 'noBorders'\r\n  //     }\r\n      \r\n  //   ]\r\n  // }\r\n\r\n    let dd = {\r\n    content: [\r\n      {\r\n        text: 'This paragraph uses header style and extends the alignment property',\r\n        style: 'header',\r\n        alignment: 'center'\r\n      },\r\n      {\r\n        table: {\r\n          widths: [250, 250],\r\n          body: [\r\n            [{\r\n              stack: [\r\n                {text: \"C14000\", fontSize: 8, margin: [0, 20, 0, 0]},\r\n                {ul: [\r\n                  \"Engine\", \"Power Filter 120\", \"Power Filter 220\"\r\n                ]}\r\n              ]\r\n            },\r\n            {\r\n              stack: [\r\n                {text: \"C14000\", fontSize: 8, margin: [0, 20, 0, 0]},\r\n                {ul: [\r\n                  \"Engine\", \"Power Filter 120\", \"Power Filter 220\"\r\n                ]}\r\n              ]\r\n            }],\r\n            [{\r\n              stack: [\r\n                {text: \"C14000\", fontSize: 8, margin: [0, 20, 0, 0]},\r\n                {ul: [\r\n                  \"Engine\", \"Power Filter 120\", \"Power Filter 220\"\r\n                ]}\r\n              ]\r\n            },\r\n            {\r\n              stack: [\r\n                {text: \"C14000\", fontSize: 8, margin: [0, 20, 0, 0]},\r\n                {ul: [\r\n                  \"Engine\", \"Power Filter 120\", \"Power Filter 220\"\r\n                ]}\r\n              ]\r\n            }]\r\n          ]\r\n        },\r\n        layout: 'noBorders'\r\n      }\r\n      \r\n    ]\r\n  }\r\n\r\n\r\n  console.log(body)\r\n\r\n  pdfMake.createPdf(dd).open();\r\n\r\n}\r\n\r\nexport { pdf }"]},"metadata":{},"sourceType":"module"}