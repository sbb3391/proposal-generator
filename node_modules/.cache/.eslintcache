[{"/home/sbb3391/code/projects/react-proposal-generator/src/index.js":"1","/home/sbb3391/code/projects/react-proposal-generator/src/reportWebVitals.js":"2","/home/sbb3391/code/projects/react-proposal-generator/src/App.js":"3","/home/sbb3391/code/projects/react-proposal-generator/src/containers/Home.js":"4","/home/sbb3391/code/projects/react-proposal-generator/src/containers/Navbar.js":"5","/home/sbb3391/code/projects/react-proposal-generator/src/components/About.js":"6","/home/sbb3391/code/projects/react-proposal-generator/src/components/Edit.js":"7","/home/sbb3391/code/projects/react-proposal-generator/src/containers/NewMachine.js":"8","/home/sbb3391/code/projects/react-proposal-generator/src/components/PickModel.js":"9","/home/sbb3391/code/projects/react-proposal-generator/src/reducers/newMachineReducer.js":"10","/home/sbb3391/code/projects/react-proposal-generator/src/components/EnginePick.js":"11","/home/sbb3391/code/projects/react-proposal-generator/src/components/PartsForAssembly.js":"12","/home/sbb3391/code/projects/react-proposal-generator/src/components/MachineAssemblies.js":"13","/home/sbb3391/code/projects/react-proposal-generator/src/components/UnitAssembly.js":"14","/home/sbb3391/code/projects/react-proposal-generator/src/components/statusButton.js":"15","/home/sbb3391/code/projects/react-proposal-generator/src/components/CompleteButton.js":"16","/home/sbb3391/code/projects/react-proposal-generator/src/containers/Machine.js":"17","/home/sbb3391/code/projects/react-proposal-generator/src/components/MachineOverview.js":"18","/home/sbb3391/code/projects/react-proposal-generator/src/containers/NewProposal.js":"19","/home/sbb3391/code/projects/react-proposal-generator/src/components/pdf.js":"20","/home/sbb3391/code/projects/react-proposal-generator/src/actions/fetchAssemblies.js":"21","/home/sbb3391/code/projects/react-proposal-generator/src/containers/Proposals.js":"22"},{"size":792,"mtime":1629674395641,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":1627778898460,"results":"25","hashOfConfig":"24"},{"size":936,"mtime":1629750868880,"results":"26","hashOfConfig":"24"},{"size":173,"mtime":1627778898460,"results":"27","hashOfConfig":"24"},{"size":1091,"mtime":1629754664420,"results":"28","hashOfConfig":"24"},{"size":189,"mtime":1627943578240,"results":"29","hashOfConfig":"24"},{"size":184,"mtime":1627941555910,"results":"30","hashOfConfig":"24"},{"size":1542,"mtime":1629426256599,"results":"31","hashOfConfig":"24"},{"size":1963,"mtime":1629489827099,"results":"32","hashOfConfig":"24"},{"size":4897,"mtime":1629756203420,"results":"33","hashOfConfig":"24"},{"size":5969,"mtime":1629676264031,"results":"34","hashOfConfig":"24"},{"size":1823,"mtime":1629676270961,"results":"35","hashOfConfig":"24"},{"size":541,"mtime":1628969293466,"results":"36","hashOfConfig":"24"},{"size":1982,"mtime":1628743190812,"results":"37","hashOfConfig":"24"},{"size":1130,"mtime":1628575661122,"results":"38","hashOfConfig":"24"},{"size":1201,"mtime":1629490041639,"results":"39","hashOfConfig":"24"},{"size":4637,"mtime":1629756479550,"results":"40","hashOfConfig":"24"},{"size":1093,"mtime":1629756689870,"results":"41","hashOfConfig":"24"},{"size":1341,"mtime":1628891056546,"results":"42","hashOfConfig":"24"},{"size":14853,"mtime":1629753508090,"results":"43","hashOfConfig":"24"},{"size":314,"mtime":1629675992821,"results":"44","hashOfConfig":"24"},{"size":350,"mtime":1629750827510,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1dx18k4",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"48"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/sbb3391/code/projects/react-proposal-generator/src/index.js",[],["96","97"],"/home/sbb3391/code/projects/react-proposal-generator/src/reportWebVitals.js",[],"/home/sbb3391/code/projects/react-proposal-generator/src/App.js",[],"/home/sbb3391/code/projects/react-proposal-generator/src/containers/Home.js",[],"/home/sbb3391/code/projects/react-proposal-generator/src/containers/Navbar.js",[],"/home/sbb3391/code/projects/react-proposal-generator/src/components/About.js",[],["98","99"],"/home/sbb3391/code/projects/react-proposal-generator/src/components/Edit.js",[],"/home/sbb3391/code/projects/react-proposal-generator/src/containers/NewMachine.js",[],"/home/sbb3391/code/projects/react-proposal-generator/src/components/PickModel.js",[],"/home/sbb3391/code/projects/react-proposal-generator/src/reducers/newMachineReducer.js",["100","101","102"],"// import { combineReducers } from 'redux';\r\n\r\nconst defaultState = {\r\n  requesting: false,\r\n  clickedAssemblyId: null,\r\n  machine: {\r\n    completedMachine: false,\r\n    assemblies: []\r\n  },\r\n  model: {\r\n    allAssemblies: [],\r\n    remainingAssemblies: [],\r\n    remainingPickOneGroupIds: []\r\n  }\r\n}\r\n\r\nfunction newMachineReducer(state = defaultState, action) {\r\n  switch (action.type) {\r\n    case 'RESET_MACHINE':\r\n      return defaultState\r\n    case 'ADD_MODEL':\r\n      return Object.assign({}, {...state}, {modelId: action.modelId})\r\n    case 'START_FETCHING_ASSEMBLIES':\r\n      return {\r\n        ...state,\r\n        requesting: true\r\n      }\r\n    case 'ADD_ALL_ASSEMBLIES':\r\n      // This only gets called once to add all machine assemblies from fetch to the store\r\n      const requiredAssemblies = action.assemblies.filter( assembly => assembly.required_assembly)\r\n      const unrequiredAssemblies = action.assemblies.filter( assembly => !assembly.required_assembly)\r\n\r\n      // getting all pickOneGroups and adding it to store\r\n      const allPickOneGroups = action.assemblies.filter( assembly => assembly.pick_one_group )\r\n      const pickOneGroupIds = allPickOneGroups.map( assembly => assembly.pick_one_group.pick_one_group_id )\r\n      const uniquePickOneGroupIds = [...new Set(pickOneGroupIds)]\r\n\r\n      return {\r\n        ...state,\r\n          machine: {\r\n            assemblies: requiredAssemblies\r\n          },\r\n          model: {\r\n            ...state.model,\r\n              allAssemblies: action.assemblies,\r\n              remainingAssemblies: unrequiredAssemblies,\r\n              remainingPickOneGroupIds: uniquePickOneGroupIds\r\n          },\r\n          requesting: false\r\n      }\r\n    case 'ADD_ASSEMBLY':\r\n      // this takes one assembly and adds it to the machine assembly (the one we're building)\r\n      // and removes it from the list of remaining assemblies that are available for selection\r\n\r\n      const indexOfAddedAssembly = state.model.remainingAssemblies.indexOf(action.assembly)\r\n\r\n      let newState = {\r\n        ...state,\r\n        clickedAssemblyId: action.assembly.id,\r\n        machine: {\r\n          ...state.machine,\r\n          assemblies: [...state.machine.assemblies, action.assembly]\r\n        },\r\n        model: {\r\n          ...state.model,\r\n          remainingAssemblies: [...state.model.remainingAssemblies.slice(0, indexOfAddedAssembly), ...state.model.remainingAssemblies.slice(indexOfAddedAssembly + 1)]\r\n        }\r\n      }\r\n\r\n      // determines if the selected assembly belongs to a 'pick one group.' if it does, all other items in the group will also be\r\n      // removed as selection options.\r\n      const group = action.assembly.pick_one_group\r\n      \r\n      if (group) {\r\n        const indexOfGroupId = state.model.remainingPickOneGroupIds.indexOf(group.pick_one_group_id)\r\n        const remainingAssembliesInPickOneGroups = state.model.remainingAssemblies.filter( assembly => assembly.pick_one_group)\r\n        const assembliesInGroup = remainingAssembliesInPickOneGroups.filter( assembly => assembly.pick_one_group.pick_one_group_id === group.pick_one_group_id )\r\n\r\n        const newRemainingAssemblies = state.model.remainingAssemblies.filter( assembly => !assembliesInGroup.includes(assembly))\r\n\r\n        newState = {\r\n          ...newState,\r\n            model: {\r\n              ...newState.model,\r\n              remainingPickOneGroupIds: [...state.model.remainingPickOneGroupIds.slice(0, indexOfGroupId), ...state.model.remainingPickOneGroupIds.slice( indexOfGroupId + 1) ],\r\n              remainingAssemblies: newRemainingAssemblies\r\n            }\r\n        }\r\n      }\r\n\r\n      return newState;\r\n\r\n    case 'REMOVE_CLICKED_ID':\r\n      return {\r\n        ...state,\r\n          clickedAssemblyId: null\r\n      }\r\n\r\n    case 'ADD_MACHINE':\r\n      return {\r\n        ...state,\r\n        machine: {\r\n          assemblies: action.machine.assemblies\r\n        }\r\n      }\r\n    case 'CHANGE_ITEM_PRICE':\r\n      const assembly = state.machine.assemblies.find( assembly => assembly.id == action.item.assemblyId && assembly.modelId == action.item.modelId)\r\n      const assemblyIndex = state.machine.assemblies.indexOf(assembly)\r\n      const item = assembly.items.find( i => i.itemId == action.item.itemId)\r\n      const itemIndex = assembly.items.indexOf(item)\r\n\r\n      const newAssembly = Object.assign({}, assembly)\r\n      newAssembly.items[itemIndex].unitPrice = action.item.unitPrice\r\n      \r\n      const assemblyState = state.machine.assemblies\r\n      const firstHalf = assemblyState.slice(0, assemblyIndex)\r\n      const secondHalf = assemblyState.slice(assemblyIndex + 1)\r\n      \r\n      return {\r\n        ...state,\r\n        machine: {\r\n          ...state.machine,\r\n          assemblies: [\r\n            ...firstHalf, newAssembly, ...secondHalf\r\n          ]\r\n        }\r\n      }\r\n    default:\r\n      return {...state}\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default newMachineReducer;\r\n","/home/sbb3391/code/projects/react-proposal-generator/src/components/EnginePick.js",["103","104"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PartsForAssembly from './PartsForAssembly'\r\nimport MachineAssemblies from './MachineAssemblies'\r\nimport StatusButton from './statusButton'\r\nimport CompleteButton from './CompleteButton'\r\nimport { fetchAssemblies } from '../actions/fetchAssemblies'\r\n\r\n\r\n\r\nclass EnginePick extends Component {\r\n\r\n  state = {\r\n    selectedParts: [],\r\n    activeAssemblyId: null\r\n  }\r\n\r\n  componentDidMount() {\r\n    // only fetch once, on the first render to get all the assemblies\r\n    if (this.props.allAssemblies.length === 0) {\r\n      this.props.fetchAssemblies(this.props.modelId)\r\n    }\r\n  }\r\n\r\n  removeWindow = () => {\r\n    this.props.removeClickedId()\r\n  }\r\n\r\n  handleAdd = (e) => {\r\n    // getting the index of the clicked assembly in the array of all assemblies in state\r\n    const clickedAssemblyId = e.target.id\r\n\r\n    this.props.addAssembly(this.props.allAssemblies.find( assembly => assembly.id == clickedAssemblyId))\r\n  }\r\n\r\n  renderPartsForAssembly = () => {\r\n    if (this.props.clickedId) {\r\n      const assemblies = this.props.allAssemblies\r\n      const selectedAssembly = assemblies.find( assembly => assembly.id == this.props.clickedId)\r\n\r\n      const requiredItems = selectedAssembly.items.filter( item => item.required !== false)\r\n      \r\n      // if the selected assembly has one or more unrequired items\r\n      if (requiredItems.length !== selectedAssembly.items.length) {\r\n        return(<PartsForAssembly assemblyId={this.props.clickedId} removeWindow={this.removeWindow} step={this.props.step}/>)\r\n      }\r\n    }\r\n  }\r\n\r\n  renderAssemblies = () => {\r\n    const stepAssemblies = this.props.remainingAssemblies.filter( assembly => assembly.assembly_type === this.props.step)\r\n\r\n    return stepAssemblies.map( assembly => {\r\n      return(\r\n        <div className=\"relative assembly bg-blue-200 w-40 h-36 flex flex-col place-items-center justify-center border rounded-md mr-2 mb-2\" id={assembly.id}>\r\n          <h1 className=\"text-center font-bold cursor-pointer text-md hover:underline\" id={assembly.id} onClick={this.handleAdd}>{assembly.name}</h1>\r\n          <span className=\"absolute right-1 bottom-1 text-md cursor-pointer text-lg transform duration-75 hover:-translate-y-1\">&#128712;</span>\r\n        </div>\r\n      )\r\n    })\r\n  }\r\n\r\n  renderNextButton = () => {\r\n    if (this.props.nextStep === \"submit\") {\r\n\r\n    } else {\r\n      return(\r\n        <div className=\"flex place-items-center\">\r\n          <span className=\"text-6xl cursor-pointer\" onClick={() => this.props.updateStep(this.props.nextStep)}>&#129185;</span>\r\n        </div>\r\n        // <button onClick={() => this.props.updateStep(this.props.nextStep)} className=\"border border-black rounded-md w-36\">Next</button>\r\n      ) \r\n    }\r\n  }\r\n\r\n  renderCompleteButton = () => {\r\n    if (this.props.remainingPickOneGroupIds.length === 0 ) {\r\n      return <CompleteButton />\r\n    }\r\n\r\n    const button = document.querySelector(\"#complete-button\")\r\n\r\n    if (button) {\r\n    }\r\n\r\n    // window.onload(\r\n    //   setIn\r\n    // )\r\n    // setInterval(() => {\r\n    //   this.moveButtonUp(completeButton)\r\n    // }, 500)\r\n      \r\n  }\r\n\r\n  moveButtonUp = (button) => {\r\n    button.class = \"moving-button\"\r\n\r\n    setTimeout(() => button.class = \"static-button\", 200)\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    if (this.props.requesting) {\r\n      return <h1>Please wait - assemblies loading!</h1>\r\n    } else {\r\n      return (\r\n        <div className=\"w-full h-full relative flex flex-col\">\r\n          <div className=\"absolute z-10 w-full mx-auto h-full flex\">\r\n            <div className=\"flex flex-col w-2/3 h-full space-y-10 place-items-center\">\r\n              <div className=\"mt-4 flex space-x-4\">\r\n                <StatusButton text=\"main unit\"/>\r\n                <span className=\"text-4xl\">&#x2192;</span>\r\n                <StatusButton text=\"paper handling\"/>\r\n                <span className=\"text-4xl\">&#x2192;</span>\r\n                <StatusButton text=\"paper output\"/>\r\n                <span className=\"text-4xl\">&#x2192;</span>\r\n                <StatusButton text=\"finishing\"/>\r\n                <span className=\"text-4xl\">&#x2192;</span>\r\n                <StatusButton text=\"controller\"/>\r\n                {this.renderCompleteButton()}\r\n              </div>\r\n              <h1 className=\"text-2xl text-center h-8\">Select {this.props.step} Assemblies:</h1>\r\n              <div className=\"flex w-5/6 h-1/2\">\r\n                <div className=\"flex place-items-center\">\r\n                  <span className=\"text-6xl cursor-pointer\" onClick={() => this.props.updateStep(this.props.prevStep)}>&#129184;</span>\r\n                </div>\r\n                <div className=\"w-4/5 flex flex-wrap space mx-auto\" id=\"select-assemblies\">\r\n                  {this.renderAssemblies()}\r\n                </div>\r\n                  {this.renderNextButton()}\r\n              </div>\r\n            </div>\r\n            <div className=\"w-1/4 mx-auto h-full flex flex-col border-2 border-grey-400 rounded-md overflow-auto py-4 space-y-2\" id=\"selected-items\">\r\n              <MachineAssemblies />\r\n            </div>\r\n\r\n          </div>\r\n          {this.renderPartsForAssembly()}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => (\r\n  {\r\n    modelId: state.modelId,\r\n    clickedId: state.clickedAssemblyId,\r\n    allAssemblies: state.model.allAssemblies,\r\n    remainingAssemblies: state.model.remainingAssemblies,\r\n    remainingPickOneGroupIds: state.model.remainingPickOneGroupIds,\r\n    machineAssemblies: state.machine.assemblies,\r\n    requesting: state.requesting\r\n  }\r\n)\r\n\r\nconst mapDispatchToProps = dispatch => (\r\n  {\r\n    fetchAssemblies: (modelId) => dispatch(fetchAssemblies(modelId)),\r\n    addAssembly: assembly => dispatch({type: 'ADD_ASSEMBLY', assembly: assembly}),\r\n    removeClickedId: () => dispatch({type: 'REMOVE_CLICKED_ID', id: \"\"})\r\n  }\r\n)\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EnginePick)\r\n","/home/sbb3391/code/projects/react-proposal-generator/src/components/PartsForAssembly.js",[],"/home/sbb3391/code/projects/react-proposal-generator/src/components/MachineAssemblies.js",[],"/home/sbb3391/code/projects/react-proposal-generator/src/components/UnitAssembly.js",["105"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nclass UnitAssembly extends Component {\r\n\r\n  removeAssemblyFromMachine = () => {\r\n  }\r\n\r\n  renderAssembliesAndItems = () => {\r\n    const filteredAssemblies = this.props.assemblies.filter( assembly => assembly.assembly_type == this.props.assemblyName)\r\n\r\n    return filteredAssemblies.map( assembly => {\r\n      return(\r\n        <div className=\"px-1 pb-2 w-full mx-auto flex flex-col space-y-1\">\r\n          <div className=\"flex space-x-2\">\r\n            <span className=\"show cursor-pointer\">&#9650;</span>\r\n            { assembly.required_assembly ? <h3 className=\"mb-2 font-bold border rounded-md bg-blue-100 pl-1\">{assembly.name} ({assembly.items.length} Items)</h3> : \r\n              <h3 className=\"mb-2 font-bold border rounded-md bg-blue-100 hover:text-color-red-500 cursor-pointer hover:underline hover:text-red-500 pl-1\" onClick={this.removeAssemblyFromMachine}>{assembly.name} ({assembly.items.length} Items)</h3>\r\n            }\r\n          </div>\r\n          {assembly.items.map( item => {\r\n            return(\r\n              <div className=\"flex space-x-2 hidden\">\r\n                { item.required ? <span className=\"inline-block align-top\">&#9734;</span> : <span className=\"text-xs cursor-pointer\">&#10060;</span> }\r\n                <span className=\"text-xs\">{item.description}</span>\r\n              </div>\r\n\r\n            )\r\n          })}\r\n        </div>\r\n      )\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"w-11/12 mx-auto flex flex-col pt-2 space-y-1 border-2 border-grey-200 rounded-md\">\r\n        <h1 className=\"text-center pl-2 underline mb-1\">{this.props.assemblyName}</h1>\r\n        {this.renderAssembliesAndItems()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => (\r\n  {}\r\n)\r\n\r\nconst mapStateToProps = (state) => (\r\n  {assemblies: state.machine.assemblies}\r\n)\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UnitAssembly);","/home/sbb3391/code/projects/react-proposal-generator/src/components/statusButton.js",["106"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nclass StatusButton extends Component {\r\n  render() {\r\n    const remainingAssembliesOfThisType = this.props.remainingAssemblies.filter( assembly => assembly.assembly_type == this.props.text)\r\n    const remainingAssembliesBelongingToPickOneGroup = remainingAssembliesOfThisType.filter( assembly => assembly.pick_one_group )\r\n\r\n    return (\r\n      <>\r\n        { remainingAssembliesBelongingToPickOneGroup.length === 0 ?\r\n          <button className=\"cursor-default border border-black rounded-lg p-2 bg-green-500 text-white font-bold\">{this.props.text}</button> :\r\n          <button className=\"cursor-default border border-black rounded-lg p-2 bg-red-500 text-white font-bold\">{this.props.text}</button> \r\n        }\r\n        \r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => (\r\n  {}\r\n)\r\n\r\nconst mapStateToProps = (state) => (\r\n  {\r\n    machineAssemblies: state.machine.assemblies,\r\n    remainingAssemblies: state.model.remainingAssemblies\r\n  }\r\n)\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StatusButton);","/home/sbb3391/code/projects/react-proposal-generator/src/components/CompleteButton.js",[],"/home/sbb3391/code/projects/react-proposal-generator/src/containers/Machine.js",["107","108","109","110","111","112"],"/home/sbb3391/code/projects/react-proposal-generator/src/components/MachineOverview.js",[],"/home/sbb3391/code/projects/react-proposal-generator/src/containers/NewProposal.js",[],"/home/sbb3391/code/projects/react-proposal-generator/src/components/pdf.js",["113","114"],"/home/sbb3391/code/projects/react-proposal-generator/src/actions/fetchAssemblies.js",[],"/home/sbb3391/code/projects/react-proposal-generator/src/containers/Proposals.js",[],{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"115","replacedBy":"119"},{"ruleId":"117","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":107,"column":79,"nodeType":"123","messageId":"124","endLine":107,"endColumn":81},{"ruleId":"121","severity":1,"message":"122","line":107,"column":125,"nodeType":"123","messageId":"124","endLine":107,"endColumn":127},{"ruleId":"121","severity":1,"message":"122","line":109,"column":55,"nodeType":"123","messageId":"124","endLine":109,"endColumn":57},{"ruleId":"121","severity":1,"message":"122","line":33,"column":83,"nodeType":"123","messageId":"124","endLine":33,"endColumn":85},{"ruleId":"121","severity":1,"message":"122","line":39,"column":73,"nodeType":"123","messageId":"124","endLine":39,"endColumn":75},{"ruleId":"121","severity":1,"message":"122","line":10,"column":97,"nodeType":"123","messageId":"124","endLine":10,"endColumn":99},{"ruleId":"121","severity":1,"message":"122","line":6,"column":117,"nodeType":"123","messageId":"124","endLine":6,"endColumn":119},{"ruleId":"121","severity":1,"message":"122","line":40,"column":82,"nodeType":"123","messageId":"124","endLine":40,"endColumn":84},{"ruleId":"121","severity":1,"message":"122","line":40,"column":116,"nodeType":"123","messageId":"124","endLine":40,"endColumn":118},{"ruleId":"121","severity":1,"message":"122","line":42,"column":62,"nodeType":"123","messageId":"124","endLine":42,"endColumn":64},{"ruleId":"121","severity":1,"message":"122","line":60,"column":88,"nodeType":"123","messageId":"124","endLine":60,"endColumn":90},{"ruleId":"121","severity":1,"message":"122","line":60,"column":127,"nodeType":"123","messageId":"124","endLine":60,"endColumn":129},{"ruleId":"121","severity":1,"message":"122","line":62,"column":49,"nodeType":"123","messageId":"124","endLine":62,"endColumn":51},{"ruleId":"125","severity":1,"message":"126","line":1,"column":10,"nodeType":"127","messageId":"128","endLine":1,"endColumn":22},{"ruleId":"129","severity":1,"message":"130","line":38,"column":5,"nodeType":"131","messageId":"132","endLine":54,"endColumn":6},"no-native-reassign",["133"],"no-negated-in-lhs",["134"],["133"],["134"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'buildQueries' is defined but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-global-assign","no-unsafe-negation"]